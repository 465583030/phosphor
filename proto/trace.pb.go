// Code generated by protoc-gen-go.
// source: github.com/mattheath/phosphor/proto/trace.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	github.com/mattheath/phosphor/proto/trace.proto

It has these top-level messages:
	Annotation
	KeyValue
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = math.Inf

type AnnotationType int32

const (
	AnnotationType_UNKNOWN    AnnotationType = 0
	AnnotationType_REQ        AnnotationType = 1
	AnnotationType_REP        AnnotationType = 2
	AnnotationType_IN         AnnotationType = 3
	AnnotationType_OUT        AnnotationType = 4
	AnnotationType_TIMEOUT    AnnotationType = 5
	AnnotationType_ANNOTATION AnnotationType = 6
)

var AnnotationType_name = map[int32]string{
	0: "UNKNOWN",
	1: "REQ",
	2: "REP",
	3: "IN",
	4: "OUT",
	5: "TIMEOUT",
	6: "ANNOTATION",
}
var AnnotationType_value = map[string]int32{
	"UNKNOWN":    0,
	"REQ":        1,
	"REP":        2,
	"IN":         3,
	"OUT":        4,
	"TIMEOUT":    5,
	"ANNOTATION": 6,
}

func (x AnnotationType) Enum() *AnnotationType {
	p := new(AnnotationType)
	*p = x
	return p
}
func (x AnnotationType) String() string {
	return proto1.EnumName(AnnotationType_name, int32(x))
}
func (x *AnnotationType) UnmarshalJSON(data []byte) error {
	value, err := proto1.UnmarshalJSONEnum(AnnotationType_value, data, "AnnotationType")
	if err != nil {
		return err
	}
	*x = AnnotationType(value)
	return nil
}

type Annotation struct {
	// The ID of the trace this annotation is a component of
	TraceId *string `protobuf:"bytes,1,req,name=trace_id" json:"trace_id,omitempty"`
	// The span this trace corresponds to, in the case this
	// is representing a service (REQ/REP) call
	SpanId *string `protobuf:"bytes,2,opt,name=span_id" json:"span_id,omitempty"`
	// The parent span this trace corresponds to, allowing us
	// to correlate trace frames and reconstruct the request
	ParentId *string `protobuf:"bytes,3,opt,name=parent_id" json:"parent_id,omitempty"`
	// The type of annotation we're capturing
	Type *AnnotationType `protobuf:"varint,4,req,name=type,enum=proto.AnnotationType" json:"type,omitempty"`
	// Time since the epoch in nanoseconds
	Timestamp *int64 `protobuf:"varint,5,req,name=timestamp" json:"timestamp,omitempty"`
	// Duration in nanoseconds
	// This should only be used to measure time on the same node
	// eg. the duration of service / rpc calls
	Duration *int64 `protobuf:"varint,6,opt,name=duration" json:"duration,omitempty"`
	// Machine hostname, container name etc
	Hostname *string `protobuf:"bytes,7,opt,name=hostname" json:"hostname,omitempty"`
	// Origin of this annotation, likely a service or application for a RPC
	Origin *string `protobuf:"bytes,8,opt,name=origin" json:"origin,omitempty"`
	// Destination of this annotations action
	// eg. the service which a request was destined for
	// likely not set for annotations
	Destination *string `protobuf:"bytes,9,opt,name=destination" json:"destination,omitempty"`
	// Payload as a string - eg. JSON encoded
	Payload *string `protobuf:"bytes,10,opt,name=payload" json:"payload,omitempty"`
	// Repeated series of key value fields for arbitrary data
	KeyValue         []*KeyValue `protobuf:"bytes,11,rep,name=key_value" json:"key_value,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *Annotation) Reset()         { *m = Annotation{} }
func (m *Annotation) String() string { return proto1.CompactTextString(m) }
func (*Annotation) ProtoMessage()    {}

func (m *Annotation) GetTraceId() string {
	if m != nil && m.TraceId != nil {
		return *m.TraceId
	}
	return ""
}

func (m *Annotation) GetSpanId() string {
	if m != nil && m.SpanId != nil {
		return *m.SpanId
	}
	return ""
}

func (m *Annotation) GetParentId() string {
	if m != nil && m.ParentId != nil {
		return *m.ParentId
	}
	return ""
}

func (m *Annotation) GetType() AnnotationType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return AnnotationType_UNKNOWN
}

func (m *Annotation) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *Annotation) GetDuration() int64 {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return 0
}

func (m *Annotation) GetHostname() string {
	if m != nil && m.Hostname != nil {
		return *m.Hostname
	}
	return ""
}

func (m *Annotation) GetOrigin() string {
	if m != nil && m.Origin != nil {
		return *m.Origin
	}
	return ""
}

func (m *Annotation) GetDestination() string {
	if m != nil && m.Destination != nil {
		return *m.Destination
	}
	return ""
}

func (m *Annotation) GetPayload() string {
	if m != nil && m.Payload != nil {
		return *m.Payload
	}
	return ""
}

func (m *Annotation) GetKeyValue() []*KeyValue {
	if m != nil {
		return m.KeyValue
	}
	return nil
}

type KeyValue struct {
	Key              *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *KeyValue) Reset()         { *m = KeyValue{} }
func (m *KeyValue) String() string { return proto1.CompactTextString(m) }
func (*KeyValue) ProtoMessage()    {}

func (m *KeyValue) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *KeyValue) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func init() {
	proto1.RegisterEnum("proto.AnnotationType", AnnotationType_name, AnnotationType_value)
}
